/*
给定一个整数矩阵，找出最长递增路径的长度。

对于每个单元格，你可以往上，下，左，右四个方向移动。 你不能在对角线方向上移动或移动到边界外（即不允许环绕）。

示例 1:

输入: nums = 
[
  [9,9,4],
  [6,6,8],
  [2,1,1]
] 
输出: 4 
解释: 最长递增路径为 [1, 2, 6, 9]。
示例 2:

输入: nums = 
[
  [3,4,5],
  [3,2,6],
  [2,2,1]
] 
输出: 4 
解释: 最长递增路径是 [3, 4, 5, 6]。注意不允许在对角线方向上移动。
*/

class Solution {
public:
    // 每个元素都存在一定数目的可以行走的下次路径，
    // 例如示例1：
    // [0, 0, 2],
    // [1, 2, 0],
    // [1, 2, 1]
    // 例如示例2：
    // [1, 1, 1],
    // [0, 3, 0],
    // [1, 0, 2]
    // 尽可能的选择、下次可走路径较多的路径才行
    // 寻路径的贪心算法
    int longestIncreasingPath(vector<vector<int>>& matrix) {
        
    }
};